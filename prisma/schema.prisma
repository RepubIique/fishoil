generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  role     UserRole  @default(USER)
  bookings Booking[]
  reviews  Review[]
}

enum UserRole {
  USER
  CHEF
}

model Chef {
  id                Int           @id @default(autoincrement())
  userId            Int
  headline          String? // Short professional headline (e.g., "Executive Chef with 10 years of experience")
  description       String?
  location          String?
  yearsOfExperience Int?
  cuisines          Cuisine[] // Cuisines the chef specializes in
  bookings          Booking[]
  education         Education[]
  certificates      Certificate[]
  languages         Language[]
  socialLinks       SocialLink[]
  hourlyRate        Float?
  reviews           Review[]
  portfolios        Portfolio[]
}

model Education {
  id        Int      @id @default(autoincrement())
  school    String
  degree    String
  field     String
  startDate DateTime
  endDate   DateTime
  chefId    Int
  Chef      Chef     @relation(fields: [chefId], references: [id])
}

model Certificate {
  id     Int      @id @default(autoincrement())
  name   String
  issuer String
  date   DateTime
  chefId Int
  Chef   Chef     @relation(fields: [chefId], references: [id])
}

model Language {
  id     Int    @id @default(autoincrement())
  name   String
  level  String // Fluency level (e.g., "Native", "Fluent", "Conversational")
  chefId Int
  Chef   Chef   @relation(fields: [chefId], references: [id])
}

model SocialLink {
  id       Int    @id @default(autoincrement())
  platform String
  url      String
  chefId   Int
  Chef     Chef   @relation(fields: [chefId], references: [id])
}

model Cuisine {
  id     Int    @id @default(autoincrement())
  name   String @unique
  chefId Int
  Chef   Chef   @relation(fields: [chefId], references: [id])
}

model Portfolio {
  id          Int        @id @default(autoincrement())
  title       String // Title for the portfolio (e.g., "Italian Dishes")
  description String?
  chefId      Int
  menuItems   MenuItem[] // Portfolio can contain multiple menu items
  Chef        Chef       @relation(fields: [chefId], references: [id])
}

model MenuItem {
  id          Int       @id @default(autoincrement())
  name        String // Name of the dish (e.g., "Spaghetti Carbonara")
  description String? 
  price       Float?
  image       String? 
  portfolioId Int 
  Portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
}

model Booking {
  id         Int           @id @default(autoincrement())
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  status     BookingStatus @default(PENDING)
  userId     Int
  chefId     Int
  timeSlotId Int?
  timeSlots  TimeSlot[]
  User       User          @relation(fields: [userId], references: [id])
  Chef       Chef          @relation(fields: [chefId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

model TimeSlot {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  isBooked  Boolean  @default(false)
  bookingId Int?
  chefId    Int
  Booking   Booking? @relation(fields: [bookingId], references: [id])
}

model Review {
  id      Int    @id @default(autoincrement())
  rating  Int
  comment String
  userId  Int
  chefId  Int
  User    User   @relation(fields: [userId], references: [id])
  Chef    Chef   @relation(fields: [chefId], references: [id])
}
